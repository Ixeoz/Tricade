{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar BASE_WIDTH = 430;\nvar BASE_HEIGHT = 932;\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nexport var widthScale = width / BASE_WIDTH;\nexport var heightScale = height / BASE_HEIGHT;\nexport var scale = Math.min(widthScale, heightScale);\nexport var scaleDimension = function scaleDimension(size) {\n  return Math.round(size * scale);\n};\nexport var scaleFont = function scaleFont(size) {\n  return Math.round(size * scale);\n};\nexport var scaleSpace = function scaleSpace(size) {\n  return Math.round(size * scale);\n};\nexport var screenWidth = width;\nexport var screenHeight = height;\nexport var wp = function wp(percentage) {\n  return width * percentage / 100;\n};\nexport var hp = function hp(percentage) {\n  return height * percentage / 100;\n};\nexport var SPACING = {\n  xs: scaleSpace(4),\n  sm: scaleSpace(8),\n  md: scaleSpace(16),\n  lg: scaleSpace(24),\n  xl: scaleSpace(32),\n  xxl: scaleSpace(40)\n};\nexport var FONT_SIZES = {\n  xs: scaleFont(12),\n  sm: scaleFont(14),\n  md: scaleFont(16),\n  lg: scaleFont(20),\n  xl: scaleFont(24),\n  xxl: scaleFont(32)\n};\nexport var getResponsiveDimension = function getResponsiveDimension(dimension) {\n  var minSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var scaled = scaleDimension(dimension);\n  return Math.max(scaled, minSize);\n};\nexport var getDynamicValue = function getDynamicValue(defaultValue, minValue, maxValue) {\n  var scaled = scaleDimension(defaultValue);\n  return Math.min(Math.max(scaled, minValue), maxValue);\n};\nexport var addDimensionListener = function addDimensionListener(callback) {\n  return Dimensions.addEventListener('change', callback);\n};","map":{"version":3,"names":["BASE_WIDTH","BASE_HEIGHT","_Dimensions$get","Dimensions","get","width","height","widthScale","heightScale","scale","Math","min","scaleDimension","size","round","scaleFont","scaleSpace","screenWidth","screenHeight","wp","percentage","hp","SPACING","xs","sm","md","lg","xl","xxl","FONT_SIZES","getResponsiveDimension","dimension","minSize","arguments","length","undefined","scaled","max","getDynamicValue","defaultValue","minValue","maxValue","addDimensionListener","callback","addEventListener"],"sources":["C:/Users/Administrator/Documents/Tricade/src/utils/dimensions.js"],"sourcesContent":["import { Dimensions } from 'react-native';\r\n\r\n// Dimensiones base del diseño (iPhone 14 Pro Max)\r\nconst BASE_WIDTH = 430;\r\nconst BASE_HEIGHT = 932;\r\n\r\n// Obtener dimensiones actuales de la pantalla\r\nconst { width, height } = Dimensions.get('window');\r\n\r\n// Calcular factores de escala\r\nexport const widthScale = width / BASE_WIDTH;\r\nexport const heightScale = height / BASE_HEIGHT;\r\nexport const scale = Math.min(widthScale, heightScale);\r\n\r\n// Función para escalar dimensiones\r\nexport const scaleDimension = (size) => {\r\n  return Math.round(size * scale);\r\n};\r\n\r\n// Función para escalar fuentes\r\nexport const scaleFont = (size) => {\r\n  return Math.round(size * scale);\r\n};\r\n\r\n// Función para escalar padding/margin\r\nexport const scaleSpace = (size) => {\r\n  return Math.round(size * scale);\r\n};\r\n\r\n// Dimensiones de la pantalla\r\nexport const screenWidth = width;\r\nexport const screenHeight = height;\r\n\r\n// Porcentajes útiles\r\nexport const wp = (percentage) => {\r\n  return (width * percentage) / 100;\r\n};\r\n\r\nexport const hp = (percentage) => {\r\n  return (height * percentage) / 100;\r\n};\r\n\r\n// Constantes de diseño\r\nexport const SPACING = {\r\n  xs: scaleSpace(4),\r\n  sm: scaleSpace(8),\r\n  md: scaleSpace(16),\r\n  lg: scaleSpace(24),\r\n  xl: scaleSpace(32),\r\n  xxl: scaleSpace(40),\r\n};\r\n\r\nexport const FONT_SIZES = {\r\n  xs: scaleFont(12),\r\n  sm: scaleFont(14),\r\n  md: scaleFont(16),\r\n  lg: scaleFont(20),\r\n  xl: scaleFont(24),\r\n  xxl: scaleFont(32),\r\n};\r\n\r\n// Función para obtener dimensiones responsivas\r\nexport const getResponsiveDimension = (dimension, minSize = 0) => {\r\n  const scaled = scaleDimension(dimension);\r\n  return Math.max(scaled, minSize);\r\n};\r\n\r\n// Función para manejar dimensiones condicionales\r\nexport const getDynamicValue = (defaultValue, minValue, maxValue) => {\r\n  const scaled = scaleDimension(defaultValue);\r\n  return Math.min(Math.max(scaled, minValue), maxValue);\r\n};\r\n\r\n// Listener para cambios de dimensión\r\nexport const addDimensionListener = (callback) => {\r\n  return Dimensions.addEventListener('change', callback);\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}