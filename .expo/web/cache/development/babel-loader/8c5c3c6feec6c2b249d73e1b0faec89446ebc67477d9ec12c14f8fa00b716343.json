{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { db } from '../firebaseConfig';\nexport var MISSIONS = {\n  DUOS: {\n    SPEED_MASTER: {\n      id: 'duos_speed_master',\n      name: 'Maestro de la Velocidad',\n      description: 'Completa una partida de Duos en menos de 2 minutos',\n      reward: 50,\n      check: function check(stats) {\n        var _stats$mejorTiempo$sp = stats.mejorTiempo.split(':').map(Number),\n          _stats$mejorTiempo$sp2 = _slicedToArray(_stats$mejorTiempo$sp, 2),\n          mins = _stats$mejorTiempo$sp2[0],\n          secs = _stats$mejorTiempo$sp2[1];\n        return mins * 60 + secs <= 120;\n      }\n    },\n    PERFECT_MATCH: {\n      id: 'duos_perfect_match',\n      name: 'Emparejador Perfecto',\n      description: 'Gana una partida de Duos sin cometer errores',\n      reward: 100,\n      check: function check(stats) {\n        return stats.victorias > 0 && stats.derrotas === 0;\n      }\n    },\n    DUOS_MASTER: {\n      id: 'duos_master',\n      name: 'Maestro de Duos',\n      description: 'Gana 10 partidas de Duos',\n      reward: 200,\n      check: function check(stats) {\n        return stats.victorias >= 10;\n      }\n    }\n  },\n  SNAKE: {\n    SNAKE_GROWER: {\n      id: 'snake_grower',\n      name: 'Serpiente Crecida',\n      description: 'Alcanza una longitud de 20 en Snake',\n      reward: 50,\n      check: function check(stats) {\n        return stats.bestScore >= 20;\n      }\n    },\n    PIXEL_EATER: {\n      id: 'pixel_eater',\n      name: 'Devorador de Píxeles',\n      description: 'Come 100 píxeles en total',\n      reward: 100,\n      check: function check(stats) {\n        return stats.totalPixels >= 100;\n      }\n    },\n    SNAKE_MASTER: {\n      id: 'snake_master',\n      name: 'Maestro de la Serpiente',\n      description: 'Juega 20 partidas de Snake',\n      reward: 200,\n      check: function check(stats) {\n        return stats.totalGames >= 20;\n      }\n    }\n  },\n  TRIKI: {\n    TRIKI_WINNER: {\n      id: 'triki_winner',\n      name: 'Ganador de Triki',\n      description: 'Gana tu primera partida de Triki',\n      reward: 50,\n      check: function check(stats) {\n        return stats.victorias > 0;\n      }\n    },\n    TRIKI_MASTER: {\n      id: 'triki_master',\n      name: 'Maestro del Triki',\n      description: 'Gana 5 partidas de Triki',\n      reward: 100,\n      check: function check(stats) {\n        return stats.victorias >= 5;\n      }\n    },\n    UNDEFEATED: {\n      id: 'triki_undefeated',\n      name: 'Imbatible',\n      description: 'Gana 3 partidas de Triki sin perder',\n      reward: 200,\n      check: function check(stats) {\n        return stats.victorias >= 3 && stats.derrotas === 0;\n      }\n    }\n  }\n};\nexport var checkAndUpdateMissions = function () {\n  var _ref = _asyncToGenerator(function* (userId, gameType, stats) {\n    try {\n      var missionsRef = doc(db, 'users', userId, 'missions', 'progress');\n      var missionsDoc = yield getDoc(missionsRef);\n      var currentMissions = {};\n      if (missionsDoc.exists()) {\n        currentMissions = missionsDoc.data();\n      }\n      var gameMissions = MISSIONS[gameType];\n      var updated = false;\n      var totalReward = 0;\n      for (var _ref2 of Object.entries(gameMissions)) {\n        var _currentMissions$miss;\n        var _ref3 = _slicedToArray(_ref2, 2);\n        var key = _ref3[0];\n        var mission = _ref3[1];\n        var missionId = mission.id;\n        if (!((_currentMissions$miss = currentMissions[missionId]) != null && _currentMissions$miss.completed) && mission.check(stats)) {\n          currentMissions[missionId] = {\n            completed: true,\n            completedAt: new Date().toISOString(),\n            reward: mission.reward\n          };\n          totalReward += mission.reward;\n          updated = true;\n        }\n      }\n      if (updated) {\n        yield setDoc(missionsRef, currentMissions, {\n          merge: true\n        });\n        return totalReward;\n      }\n      return 0;\n    } catch (error) {\n      console.error('Error checking missions:', error);\n      return 0;\n    }\n  });\n  return function checkAndUpdateMissions(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["doc","setDoc","getDoc","db","MISSIONS","DUOS","SPEED_MASTER","id","name","description","reward","check","stats","_stats$mejorTiempo$sp","mejorTiempo","split","map","Number","_stats$mejorTiempo$sp2","_slicedToArray","mins","secs","PERFECT_MATCH","victorias","derrotas","DUOS_MASTER","SNAKE","SNAKE_GROWER","bestScore","PIXEL_EATER","totalPixels","SNAKE_MASTER","totalGames","TRIKI","TRIKI_WINNER","TRIKI_MASTER","UNDEFEATED","checkAndUpdateMissions","_ref","_asyncToGenerator","userId","gameType","missionsRef","missionsDoc","currentMissions","exists","data","gameMissions","updated","totalReward","_ref2","Object","entries","_currentMissions$miss","_ref3","key","mission","missionId","completed","completedAt","Date","toISOString","merge","error","console","_x","_x2","_x3","apply","arguments"],"sources":["C:/Users/Administrator/Documents/Tricade/src/utils/missions.js"],"sourcesContent":["import { doc, setDoc, getDoc } from 'firebase/firestore';\r\nimport { db } from '../firebaseConfig';\r\n\r\n// Definición de misiones por juego\r\nexport const MISSIONS = {\r\n  DUOS: {\r\n    SPEED_MASTER: {\r\n      id: 'duos_speed_master',\r\n      name: 'Maestro de la Velocidad',\r\n      description: 'Completa una partida de Duos en menos de 2 minutos',\r\n      reward: 50,\r\n      check: (stats) => {\r\n        const [mins, secs] = stats.mejorTiempo.split(':').map(Number);\r\n        return (mins * 60 + secs) <= 120;\r\n      }\r\n    },\r\n    PERFECT_MATCH: {\r\n      id: 'duos_perfect_match',\r\n      name: 'Emparejador Perfecto',\r\n      description: 'Gana una partida de Duos sin cometer errores',\r\n      reward: 100,\r\n      check: (stats) => stats.victorias > 0 && stats.derrotas === 0\r\n    },\r\n    DUOS_MASTER: {\r\n      id: 'duos_master',\r\n      name: 'Maestro de Duos',\r\n      description: 'Gana 10 partidas de Duos',\r\n      reward: 200,\r\n      check: (stats) => stats.victorias >= 10\r\n    }\r\n  },\r\n  SNAKE: {\r\n    SNAKE_GROWER: {\r\n      id: 'snake_grower',\r\n      name: 'Serpiente Crecida',\r\n      description: 'Alcanza una longitud de 20 en Snake',\r\n      reward: 50,\r\n      check: (stats) => stats.bestScore >= 20\r\n    },\r\n    PIXEL_EATER: {\r\n      id: 'pixel_eater',\r\n      name: 'Devorador de Píxeles',\r\n      description: 'Come 100 píxeles en total',\r\n      reward: 100,\r\n      check: (stats) => stats.totalPixels >= 100\r\n    },\r\n    SNAKE_MASTER: {\r\n      id: 'snake_master',\r\n      name: 'Maestro de la Serpiente',\r\n      description: 'Juega 20 partidas de Snake',\r\n      reward: 200,\r\n      check: (stats) => stats.totalGames >= 20\r\n    }\r\n  },\r\n  TRIKI: {\r\n    TRIKI_WINNER: {\r\n      id: 'triki_winner',\r\n      name: 'Ganador de Triki',\r\n      description: 'Gana tu primera partida de Triki',\r\n      reward: 50,\r\n      check: (stats) => stats.victorias > 0\r\n    },\r\n    TRIKI_MASTER: {\r\n      id: 'triki_master',\r\n      name: 'Maestro del Triki',\r\n      description: 'Gana 5 partidas de Triki',\r\n      reward: 100,\r\n      check: (stats) => stats.victorias >= 5\r\n    },\r\n    UNDEFEATED: {\r\n      id: 'triki_undefeated',\r\n      name: 'Imbatible',\r\n      description: 'Gana 3 partidas de Triki sin perder',\r\n      reward: 200,\r\n      check: (stats) => stats.victorias >= 3 && stats.derrotas === 0\r\n    }\r\n  }\r\n};\r\n\r\n// Función para verificar y actualizar misiones\r\nexport const checkAndUpdateMissions = async (userId, gameType, stats) => {\r\n  try {\r\n    const missionsRef = doc(db, 'users', userId, 'missions', 'progress');\r\n    const missionsDoc = await getDoc(missionsRef);\r\n    let currentMissions = {};\r\n    \r\n    if (missionsDoc.exists()) {\r\n      currentMissions = missionsDoc.data();\r\n    }\r\n\r\n    const gameMissions = MISSIONS[gameType];\r\n    let updated = false;\r\n    let totalReward = 0;\r\n\r\n    for (const [key, mission] of Object.entries(gameMissions)) {\r\n      const missionId = mission.id;\r\n      \r\n      // Si la misión no está completada y cumple las condiciones\r\n      if (!currentMissions[missionId]?.completed && mission.check(stats)) {\r\n        currentMissions[missionId] = {\r\n          completed: true,\r\n          completedAt: new Date().toISOString(),\r\n          reward: mission.reward\r\n        };\r\n        totalReward += mission.reward;\r\n        updated = true;\r\n      }\r\n    }\r\n\r\n    if (updated) {\r\n      await setDoc(missionsRef, currentMissions, { merge: true });\r\n      return totalReward;\r\n    }\r\n\r\n    return 0;\r\n  } catch (error) {\r\n    console.error('Error checking missions:', error);\r\n    return 0;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}